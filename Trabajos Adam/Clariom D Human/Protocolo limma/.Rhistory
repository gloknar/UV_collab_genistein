library("oligo") # Data import, pre-processing, and QC
# Instalación oligo en R 3.6:
BiocManager::install("oligo")
library("oligo") # Data import, pre-processing, and QC
library("limma") # DEG Analysis
library("ggplot2") # Plots
library("rgl") # 3D plots
library("dplyr")  # Data wrangling
library("FactoMineR") # PCA
library("Rtsne") # t-SNE
library("uwot") # UMAP
directorio_trabajo <- "../Archivos secuenciado/"
# Obtenemos la ruta completa de los archivos con el argumento `full.names = T`
ruta_completa_archivos_secuenciado <- list.files(path = directorio_trabajo, pattern = "*.CEL", full.names = T)
# Cargamos datos
datos_crudos_microarrays <- read.celfiles(filenames = ruta_completa_archivos_secuenciado)
# Observamos el tipo de objeto que hemos cargado
summary(datos_crudos_microarrays)
# Observamos las sondas y muestras que tenemos
dim(datos_crudos_microarrays)
sampleNames(datos_crudos_microarrays)
sampleNames(datos_crudos_microarrays) <- c("Control_1", "Genisteina_1",
"Control_2", "Genisteina_2",
"Control_3", "Genisteina_3",
"Control_4", "Genisteina_4")
sampleNames(datos_crudos_microarrays)
# Obtenemos la matriz de intensidades cruda
intensidades <- oligo::exprs(datos_crudos_microarrays)
# Identificamos el nº de sondas presentes en cada microchip
dim(intensidades)[1]
# Obtenemos y mostramos los transcription clusters a los que pertenece cada sonda
transcription_clusters <- probeNames(datos_crudos_microarrays)
head(transcription_clusters)
# Cada microarray de tipo Clariom D Human contiene 1.220.891 transcription
# clusters
length(transcription_clusters)
# Obtenemos las sondas que pertenecen al transcription cluster TC1300007722.hg.1
which(transcription_clusters == "TC1300007722.hg.1")
# Anotación usada para nuestro objeto `HTAFeatureSet`
Biobase::annotation(datos_crudos_microarrays)
# Acceder a los datos del experimento del objeto `HTAFeatureSet` (en nuestro
# caso no está anotado)
Biobase::experimentData(datos_crudos_microarrays)
# Renombramos la columna "index" a "muestra"
colnames(pData(datos_crudos_microarrays)) <- "muestra"
# Añadimos el factor "Condición" a los metadatos de nuestro estudio
pData(datos_crudos_microarrays)$condicion <- as.factor(rep(c("Control", "Genisteina"), times = 4))
# Visualizamos los metadatos
pData(datos_crudos_microarrays)
affyio::get.celfile.dates(ruta_completa_archivos_secuenciado)
eSet_normalizado <- oligo::rma(object = datos_crudos_microarrays,
background = T, normalize = T)
head(eSet_normalizado@assayData$exprs)[,1:4]
library("affycoretools")
install.packages("affycoretools")
BiocManager::install("affycoretools")
library("affycoretools")
library("clariomdhumantranscriptcluster.db")
BiocManager::install("clariomdhumantranscriptcluster.db")
library("affycoretools")
library("clariomdhumantranscriptcluster.db")
# library("pd.clariom.d.human")
eSet_normalizado <- annotateEset(
eSet_normalizado,
clariomdhumantranscriptcluster.db,    # pd.clariom.d.human
multivals = "first",
columns = c("ENTREZID", "SYMBOL", "GENENAME", "ENSEMBL", "REFSEQ", "ACCNUM",
"ALIAS", "GENETYPE", "GO", "GOALL", "ONTOLOGY", "ONTOLOGYALL",
"PATH", "PROBEID"))
par(mfcol = c(1,2))
boxplot(datos_crudos_microarrays, "all",
main = "Antes", col = rainbow(8),
ylab = "intensidad sondas (log2)")
boxplot(eSet_normalizado, main = "Después",
col = rainbow(8), ylab = "intensidad sondas (log2)")
plotDensities(exprs(eSet_normalizado), legend = "topright",
group = eSet_normalizado$condicion, col = rainbow(2),
main = "Expression density")
# Creamos un dataframe de intensidades procesable por el PCA de
# dimensiones instancias x variables
intensidades_normalizadas <- t(exprs(eSet_normalizado))
intensidades_normalizadas_df <- as.data.frame(intensidades_normalizadas)
# Añadimos al dataframe el factor "condicion"
intensidades_normalizadas_df$condicion <- pData(eSet_normalizado)$condicion
# Computamos las 3 primeras componentes principales
pca_microarrays <- PCA(intensidades_normalizadas_df, graph = F,
axes = c(1:3), quali.sup = 138746)
# Graficamos las 2 primeras componentes principales
plot.PCA(pca_microarrays, choix = "ind", habillage = 138746)
# library(FactoInvestigate)
# FactoInvestigate::Investigate(pca_microarrays)
par(mfrow=c(2,2))
oligo::MAplot(eSet_normalizado, refSamples = c(1,3,5,7), which = c(2,4,6,8), main = "vs grupo Control")
pData(eSet_normalizado)
# Creamos el diseño del t-test no pareado
matriz_diseno = model.matrix(~ 0 + eSet_normalizado$condicion)
colnames(matriz_diseno) <- c("Control","Genisteina")
head(matriz_diseno)
# Generamos el modelo lineal
modelo_lineal <- lmFit(t(intensidades_normalizadas), design = matriz_diseno)
# Vemos los bolsillos que posee el objeto `modelo_lineal`
names(modelo_lineal)
modelo_lineal$coefficients[5000:5005,]
# creamos matriz de contraste
matriz_contrastes <- makeContrasts(Genisteina - Control, levels = matriz_diseno)
matriz_contrastes
diferencia_genisteina_control <- contrasts.fit(fit = modelo_lineal,
contrasts = matriz_contrastes)
t_test_bayes = eBayes(diferencia_genisteina_control, trend = T)
# Sigma vs A plot for microarray linear model
plotSA(t_test_bayes, xlab = "Average log2-expression",
ylab = "log2(sigma)", pch = 16, cex = 0.2)
pesos <- arrayWeights(eSet_normalizado, design = matriz_diseno)
barplot(pesos, xlab = "Microarray", ylab = "Peso", col = "white", las = 2)
abline(h = 1, lty = 2)
# El objeto `pesos` se puede usar como input del parámetro `weights` del comando
# lmFit()
names(t_test_bayes)
# Log2FC de genes:
head(t_test_bayes$coefficients)
head(t_test_bayes$p.value)
head(t_test_bayes$t)
# El eje X es la distribución de una t de student teórica, mientras que el eje Y
# es la distribución de nuestros datos. Si ambas coinciden (línea diagonal), los
# datos son normales (la t de student es normal al fin y al cabo, y estás
# comparándola contra tus datos).
qqt(y = t_test_bayes$t[,1], df= t_test_bayes$df.residual + t_test_bayes$df.prior); abline(0,1)
volcanoplot(t_test_bayes, highlight = 0); abline(h = 1.301, v = c(-1,1), lty = 2)
df_DEG = topTable(t_test_bayes ,coef = 1 ,number = 138745, adjust.method ="BH", sort.by = "p")
head(df_DEG)
t_test_bayes
t_test_bayes$coefficients
ncol(t_test_bayes$coefficients)
nrow(t_test_bayes$coefficients)
saveRDS(df_DEG, "tabla_resultados_total.rds")
readRDS("tabla_resultados_total.rds")
# Leemos tabla de resultados del análisis en limma
df_DEG <- readRDS("tabla_resultados_total.rds")
